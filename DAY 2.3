Understand about the loops in javascript.
                     1 while loop
                     2 do-while loop
                     3 for loop
  ----->
  While Loop:-

 While Loop: A while loop in JavaScript is a control structure that repeatedly executes a block of code as long as a specified condition remains true.
 The loop continues iterating while the condition is true, and it terminates when the condition becomes false.

 while (condition) {
  // Code to be executed as long as the condition is true
 }
 
 Do-While Loop:-
 Do...While Loop: A do...while loop in JavaScript is similar to a while loop, but it guarantees that the loop body will be executed at least once before checking the loop condition.
 The loop continues to execute while the specified condition is true, and it terminates when the condition becomes false.

 Syntax: do {
 // Code to be executed at least once
 } while (condition);


 Common Use Cases:
 When you want to guarantee the execution of the loop body at least once.
 When the number of iterations is not known beforehand, and you want to validate the condition after the first iteration.

 For Loop:-
 For Loop: A for loop in JavaScript is a control flow statement that allows you to repeatedly execute a block of code a specified number of times. 
 It's particularly useful when you know the exact number of iterations needed.

 example: for (initialization; condition; iteration) {
   // Code to be executed in each iteration
 }
 Initialization: Executed before the loop starts. Often used to initialize a counter variable.
 Condition: Evaluated before each iteration. If false, the loop terminates.
 Iteration: Executed after each iteration. Typically used to update the loop control variable.

 Key Point:
 The initialization, condition, and iteration expressions are optional. You can omit any or all of them, but you must include the semicolons.
 The code for (;;) {} represents an infinite loop in JavaScript. This construct is commonly used when you want a loop to run indefinitely or until a break statement is encountered within the loop. It's equivalent to while (true) {}.

 use case: Game Development:
 In game development, an infinite loop can be used to continuously update and render game frames until a specific condition (e.g., game over) is met.

 for (;;) {
  // Update game logic and render frames
 }

 Common Use Cases:
 When you know the exact number of iterations needed.
 Iterating over elements in an array.
 Performing a task a specific number of times.




           
